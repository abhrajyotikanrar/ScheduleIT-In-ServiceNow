<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_277835_schdl_it.ScheduleItUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>ScheduleItUtils</name>
        <script><![CDATA[var ScheduleItUtils = Class.create();
ScheduleItUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	/*
	*getMyGroupsFilter: function() => Get encoded query of the groups the current user is part of
	*
	*Returns: Encoded query of the groups the current user is part of
	*/
	getMyGroupsFilter: function(){
		var groupList = [];
		
		var grMember = new GlideRecord('sys_user_grmember');
		grMember.addQuery('user', gs.getUserID());
		grMember.query();
		while(grMember.next()){
			groupList.push(grMember.getValue('group'));
		}
		
		return "sys_idIN" + groupList.join(",");
	},
	
	/*
	*setReminderLog: function() => Create or update the reminder log for the perticular task
	*@params:
	*	operation: Which operation is being performed (insert/update)
	*	taskRecord: current (gliderecord) object of the task record being operated
	*/
	setReminderLog: function(operation, taskRecord){
		var gdt = new GlideDateTime();
		var sysDefaultTimezone = this.getSystemDefaultTimeZoneFormatted();
		var momentDateTimeFormat = "YYYY-MM-DD HH:mm:ss";
		var gdtDateTimeFormat = "yyyy-MM-dd HH:mm:ss";
		
		var scheduled_time = this.getScheduledTime(taskRecord);
		gdt.setValueUTC(scheduled_time.format(momentDateTimeFormat), gdtDateTimeFormat);
		var gdtCopy = new GlideDateTime(gdt);
		
		var reminder_period = Number(taskRecord.notification_before);
		reminder_period = reminder_period * 60 * -1;
		gdtCopy.addSeconds(reminder_period);
		
		var grLog = new GlideRecord('x_277835_schdl_it_reminder_log');
		if(operation == "insert"){
			grLog.initialize();
			grLog.task = taskRecord.sys_id;
			grLog.reminder_status = 'scheduled';
			grLog.task_time = gdt;
			grLog.reminder_mode = taskRecord.notification_preference;
			grLog.reminder_time = gdtCopy;
			grLog.scheduled_type = taskRecord.schedule_type;
			grLog.insert();
		}
		else if(operation == "update"){
			grLog.addQuery('task', taskRecord.sys_id);
			grLog.addQuery('reminder_status', 'scheduled');
			grLog.query();
			if(grLog.next()){
				grLog.task_time = gdt;
				grLog.reminder_mode = taskRecord.notification_preference;
				grLog.reminder_time = gdtCopy;
				grLog.scheduled_type = taskRecord.schedule_type;
				grLog.update();
			}
		}
	},
	
	/*
	*getScheduledTime: function() => Calculate the next scheduled time for the task
	*@params:
	*	taskRecord: current (gliderecord) object of the task record being operated
	*
	*Returns: moment object of the calculated next scheduled time in UTC timezone
	*/
	getScheduledTime: function(taskRecord){
		gs.include('moment.min.js');
		gs.include('moment-timezone-with-data.min.js');
		
		var userTimezone = taskRecord.user.time_zone;
		userTimezone = userTimezone.split(" ").join("_");                      //Relaces spaces with underscore(_)
		var timeInUserTimezone = moment().tz(userTimezone);
		var timeInUserTimezoneClone = timeInUserTimezone.clone();
		
		
		var gdtUTC = new GlideDateTime();
		var currentDateTimeUTC = new GlideDateTime(gdtUTC);
		var schedule_type = taskRecord.schedule_type;
		var scheduled_time = "";
		var daysToAdd = 0;
		var checkTimeDiffToday = true;
		var currentDay = timeInUserTimezone.day();
		currentDay = (currentDay != 0) ? currentDay : 7;                       //Monday->1, Tuesday->2, Wednesday->3 ..... Sunday->7
		var scheduled_time_moment_user_tz;
		
		if( schedule_type == 'once' ){
			gdtUTC.setValue(taskRecord.scheduled_time);
			scheduled_time = gdtUTC.getDate().toString();
			scheduled_time += " " + this.timeFormatConverter(gdtUTC.getTime().getByFormat('hh:mm:ss a'));
			scheduled_time_moment_user_tz = moment.utc(scheduled_time).tz(userTimezone);
		}
		else{
			var time = this.timeFormatConverter(taskRecord.time.getDisplayValue());
			time = this.timeFormatConverter(time).split(":");
			scheduled_time = timeInUserTimezone.format('YYYY-MM-DD');
			timeInUserTimezone.set({'hour': Number(time[0]), 'minute': Number(time[1]), 'second': Number(time[2])});
			scheduled_time += " " + this.timeFormatConverter(timeInUserTimezone.format('hh:mm:ss A'));
			scheduled_time_moment_user_tz = moment.tz(scheduled_time, userTimezone);
		}
		
		if( schedule_type == 'daily' ){
			daysToAdd = 1;
		}
		else if( schedule_type == 'weekdays' ){
			if( (1 <= currentDay) && (currentDay <= 4) ){
				daysToAdd = 1;
			}
			else if( currentDay == 5 ){
				daysToAdd = 3;
			}
			else{
				daysToAdd = 7 - currentDay + 1;
				checkTimeDiffToday = false;
			}
		}
		else if( schedule_type == 'weekends' ){
			if( currentDay < 6 ){
				daysToAdd = 6 - currentDay;
				checkTimeDiffToday = false;
			}
			else if( currentDay == 6 ){
				daysToAdd = 1;
			}
			else{
				daysToAdd = 6;
			}
		}
		else if( schedule_type == 'weekly' ){
			var scheduledDay = Number(taskRecord.scheduled_day);
			
			if(currentDay == scheduledDay){
				daysToAdd = 7;
			}
			else if(currentDay < scheduledDay){
				daysToAdd = scheduledDay - currentDay;
				checkTimeDiffToday = false;
			}
			else{
				daysToAdd = 7 - currentDay + scheduledDay;
				checkTimeDiffToday = false;
			}	
		}
		
		if( !checkTimeDiffToday || timeInUserTimezoneClone.isAfter(scheduled_time_moment_user_tz) )
			scheduled_time_moment_user_tz.add(daysToAdd, 'days');
		
		return scheduled_time_moment_user_tz.utc();    //Return the scheduled time as moment object in UTC TZ
	},
	
	/*
	*timeFormatConverter: function() => Return the format converted date in string
	*@params:
	*	date: date to be converted
	*/
	timeFormatConverter: function(time){
		time = (typeof time == "string") ? time : time.toString();
		var tlen = time.length;
		
		if(tlen > 8){
			prefix = time.substr(8, tlen - 8).trim().toLowerCase();
			substime = time.substr(0, 8).trim().split(":");
			if(prefix == 'pm' && Number(substime[0]) < 12)
				substime[0] = Number(substime[0]) + 12;
			return substime.join(":");
		}
		else{
			return time;
		}
	},
	
	/*
	*getSystemDefaultTimeZoneFormatted: function() => Returns system default timezone (spaces will be replaced with _). Example: "America/Los Angeles" => "America/Los_Angeles"
	*/
	getSystemDefaultTimeZoneFormatted: function(){
		var sysDefaultTimezone = gs.getProperty('glide.sys.default.tz').trim();
		sysDefaultTimezone = (sysDefaultTimezone != "") ? sysDefaultTimezone : "America/Los Angeles";
		sysDefaultTimezone = sysDefaultTimezone.split(" ").join("_");
		return sysDefaultTimezone;
	},

    type: 'ScheduleItUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>abhrajyoti.kanrar</sys_created_by>
        <sys_created_on>2020-05-19 22:31:37</sys_created_on>
        <sys_id>acea44c32fb49450ff24b8e72799b65d</sys_id>
        <sys_mod_count>130</sys_mod_count>
        <sys_name>ScheduleItUtils</sys_name>
        <sys_package display_value="ScheduleIT" source="x_277835_schdl_it">0a0e233a2fb09450ff24b8e72799b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ScheduleIT">0a0e233a2fb09450ff24b8e72799b65a</sys_scope>
        <sys_update_name>sys_script_include_acea44c32fb49450ff24b8e72799b65d</sys_update_name>
        <sys_updated_by>abhrajyoti.kanrar</sys_updated_by>
        <sys_updated_on>2021-04-06 22:02:19</sys_updated_on>
    </sys_script_include>
</record_update>
